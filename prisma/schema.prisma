generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with Supabase integration
model User {
  id          Int       @id @default(autoincrement())
  supabaseId  String    @unique  // Link to Supabase UID
  email       String    @unique
  username    String    // Username without uniqueness constraint
  password    String?   // Optional, depending on Supabase use
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  boards      Board[]   // Relation to boards the user owns or is part of
  comments    Comment[] // Inverse relation for comments
  votes       Vote[]    // Inverse relation for votes
}

// Board model to store boards
model Board {
  id          Int       @id @default(autoincrement())
  title       String    // Updated field
  description String?   // Optional field
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int       // Foreign key to the User who owns the board
  user        User      @relation(fields: [userId], references: [id])
  ideas       Idea[]    // Ideas related to the board
}


// Idea model for ideas within boards
model Idea {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  boardId     Int       // Foreign key to Board
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  board       Board     @relation(fields: [boardId], references: [id])
  comments    Comment[] // Comments related to the idea
  votes       Vote[]    // Track votes on ideas
}

// Comment model for idea comments
model Comment {
  id        Int      @id @default(autoincrement())
  content   String   // Content of the comment
  createdAt DateTime @default(now())
  ideaId    Int      // Foreign key to Idea
  userId    Int      // Foreign key to User
  idea      Idea     @relation(fields: [ideaId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// Vote model for tracking votes on ideas
model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  ideaId    Int
  userId    Int
  value     Int
  idea      Idea     @relation(fields: [ideaId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, ideaId]) // Add composite unique constraint
}

